"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hexToCSSFilter = void 0;
var tslib_1 = require("tslib");
/* eslint-disable */
var solver_1 = tslib_1.__importDefault(require("./solver"));
var color_1 = tslib_1.__importDefault(require("./color"));
/**
 * Transform a CSS Color from Hexadecimal to RGB color
 *
 * @param {string} hex hexadecimal color
 * @returns {([number, number, number] | [])} array with the RGB colors or empty array
 */
var hexToRgb = function (hex) {
    if (hex.length === 4) {
        return [parseInt("0x" + hex[1] + hex[1]), parseInt("0x" + hex[2] + hex[2]), parseInt("0x" + hex[3] + hex[3])];
    }
    else if (hex.length === 7) {
        return [parseInt("0x" + hex[1] + hex[2]), parseInt("0x" + hex[3] + hex[4]), parseInt("0x" + hex[5] + hex[6])];
    }
    return [];
};
var isNumeric = function (n) { return !isNaN(parseFloat(n)) && isFinite(n); };
// Memory cache for the computed results to avoid multiple
// calculations for the same color
var results = {};
/**
 * A function that transforms a HEX color into CSS filters
 *
 * @param colorValue string hexadecimal color
 * @param opts HexToCssConfiguration function configuration
 *
 */
var hexToCSSFilter = function (colorValue, opts) {
    var _a;
    if (opts === void 0) { opts = {}; }
    var red;
    var green;
    var blue;
    if (results[colorValue] && !opts.forceFilterRecalculation) {
        return Object.assign({}, results[colorValue], { cache: true });
    }
    var color;
    try {
        _a = tslib_1.__read(hexToRgb(colorValue), 3), red = _a[0], green = _a[1], blue = _a[2];
        if (!isNumeric(red) || !isNumeric(green) || !isNumeric(blue)) {
            throw new Error("hextToRgb returned an invalid value for '" + colorValue + "'");
        }
        color = new color_1.default(Number(red), Number(green), Number(blue));
    }
    catch (error) {
        throw new Error("Color value should be in HEX format. " + error);
    }
    var defaultHexToCssConfiguration = {
        acceptanceLossPercentage: 5,
        maxChecks: 30,
        forceFilterRecalculation: false,
    };
    var HexToCssConfiguration = Object.assign({}, defaultHexToCssConfiguration, opts);
    var solver = new solver_1.default(color, HexToCssConfiguration);
    results[colorValue] = Object.assign({}, solver.solve(), {
        hex: colorValue,
        rgb: [red, green, blue],
        cache: false,
    });
    return results[colorValue];
};
exports.hexToCSSFilter = hexToCSSFilter;
